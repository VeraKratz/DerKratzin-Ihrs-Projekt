{"version":3,"sources":["serviceWorker.js","components/Card.js","components/App.js","components/GlobalStyle.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","StyledCard","styled","div","withConfig","displayName","componentId","UserImage","img","NameArea","AboutArea","DateOfExam","Contact","Card","user","react_default","a","createElement","src","alt","Component","App","Card_Card","createGlobalStyle","_templateObject","ReactDOM","render","Fragment","App_App","GlobalStyle","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0c4b0b4c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst StyledCard = styled.div`\n  height: 350px;\n  margin: 5px;\n  background: #d4dde2a1;\n  border-radius: 20px;\n  padding: 15px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr 1fr 1fr 1fr 1fr;\n  grid-gap: 10px;\n  grid-template-areas:\n    'image name'\n    '. .'\n    '. .'\n    'about about'\n    'contact .';\n`\n\nconst UserImage = styled.img`\n  grid-area: image;\n`\nconst NameArea = styled.div`\n  grid-area: name;\n  margin-right: auto;\n`\nconst AboutArea = styled.div`\n  grid-area: about;\n`\n\nconst DateOfExam = styled.div`\n  grid-column: span 2;\n`\nconst Contact = styled.div`\n  grid-area: contact;\n`\n\nexport default class Card extends Component {\n  render() {\n    const user = {\n      firstName: 'Vera',\n      lastName: 'Kratz',\n      age: 'age 34',\n      gender: 'female',\n      dateOfExam: '13.12.2018',\n      about:\n        'Of course he is a happy little stone, cause we dont have any other kind. Once you learn the technique, ohhh! Turn you loose on the world; you become a tiger. There comes a nice little fluffer. Maybe he has a little friend that lives right over here. I thought today we would make a happy little stream that is just running through the woods here.',\n      contact: 'mail me @ HabeDieEhre@Servus.com'\n    }\n\n    return (\n      <StyledCard>\n        <UserImage\n          src=\"https://images.unsplash.com/photo-1500561607578-e542f3149b97?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=f82f44e65cb4765da10c3d7f0a85e7cc&auto=format&fit=crop&w=2734&q=80\"\n          alt=\"random\"\n        />\n        <NameArea>\n          <div>{user.firstName}</div>\n          <div>{user.lastName}</div>\n        </NameArea>\n        <span>{user.age}</span>\n        <span>{user.gender}</span>\n        <DateOfExam>{user.dateOfExam}</DateOfExam>\n        <AboutArea>{user.about}</AboutArea>\n        <Contact>{user.contact}</Contact>\n      </StyledCard>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Card from './Card'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Card />\n        <Card />\n        <Card />\n      </div>\n    )\n  }\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport default createGlobalStyle`\n\n* {\n  /*box-sizing: border-box;*/\n  box-sizing: content-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  background-image: url('https://images.unsplash.com/photo-1500917832468-298fa6292e2b?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=7dc310134cdefd68cbb1fc7c6ab2049d&auto=format&fit=crop&w=1500&q=80');\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nimg{\n  width:100px;\n  height:100px;\n  object-fit:cover;\n}\n`\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './components/App'\nimport GlobalStyle from './components/GlobalStyle'\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n    <GlobalStyle />\n  </React.Fragment>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}